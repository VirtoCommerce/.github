# v1.0.0
name: VC build and test

on:
  workflow_call:
    outputs:
      artifactName:
        value: ${{ jobs.build-and-test.outputs.artifactName }}
      imageArtifactName:
        value: ${{ jobs.build-and-test.outputs.imageArtifactName }}
      imageName:
        value: ${{ jobs.build-and-test.outputs.imageName }}

    inputs:
      uploadPackage:
        required: false
        type: string
        default: 'false'
      uploadDocker:
        required: false
        type: string
        default: 'false'
      eventName:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
      sonarToken:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: 'platform'
      IMAGE_ARTIFACT_NAME: 'platform_image'
      GITHUB_TOKEN: ${{ secrets.envPAT }}
      SONAR_TOKEN: ${{ secrets.sonarToken }}
      VERSION_SUFFIX: ''
      MSBuildEnableWorkloadResolver: 'false'
    outputs:
      artifactName: ${{ env.ARTIFACT_NAME }}
      imageArtifactName: ${{ env.IMAGE_ARTIFACT_NAME }}
      imageName: ${{ steps.dockerBuild.outputs.imageName}}

    steps: 
    - name: Set up dotnet6 
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Set up Node 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install VirtoCommerce.GlobalTool
      run: dotnet tool install --global VirtoCommerce.GlobalTool --version 2.1.0-alpha.17

    - name: Install dotnet-sonarscanner
      run: dotnet tool install --global dotnet-sonarscanner

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get Artifact Version
      uses: VirtoCommerce/vc-github-actions/get-image-version@master
      id: artifactVer

    - name: Set ARTIFACT_NAME, VERSION_SUFFIX,  variables
      run: |
        if [ '${{ steps.artifactVer.outputs.moduleId }}' != '' ]; then
          echo "ARTIFACT_NAME=${{ steps.artifactVer.outputs.moduleId }}" >> $GITHUB_ENV
        fi;

        if [ '${{ inputs.eventName }}' == 'workflow_dispatch' ]; then
          echo "VERSION_SUFFIX=${{ steps.artifactVer.outputs.fullSuffix }}" >> $GITHUB_ENV
        else
          echo "VERSION_SUFFIX=${{ steps.artifactVer.outputs.suffix }}" >> $GITHUB_ENV
        fi;

    - name: Add version suffix
      if: ${{ github.ref != 'refs/heads/master' }}
      uses: VirtoCommerce/vc-github-actions/add-version-suffix@master
      with:
        versionSuffix: ${{ env.VERSION_SUFFIX }}

    - name: SonarCloud Begin
      uses: VirtoCommerce/vc-github-actions/sonar-scanner-begin@master

    - name: Build
      run: vc-build Compile

    - name: Unit Tests
      run: vc-build Test -skip

    - name: SonarCloud End
      uses: VirtoCommerce/vc-github-actions/sonar-scanner-end@master

    - name: Quality Gate
      uses: VirtoCommerce/vc-github-actions/sonar-quality-gate@master
      with:
        login: ${{ env.SONAR_TOKEN }}

    - name: Packaging
      run: vc-build Compress -skip Clean+Restore+Compile+Test

    - name: Upload build artifacts
      if: ${{ inputs.uploadPackage == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          ${{ github.workspace }}/artifacts
          ${{ github.workspace }}/publish

    - name: Build Docker Image
      if: ${{ inputs.uploadDocker == 'true' }}
      id: dockerBuild
      uses: VirtoCommerce/vc-github-actions/build-docker-image@PT-4557
      with:
        outputs: type=docker,dest=/tmp/platform_image.tar
        tag: ${{ steps.image.outputs.taggedVersion }}
        imageName: 'platform'
        dockerFiles: 'https://raw.githubusercontent.com/VirtoCommerce/vc-docker/feat/net6/linux/platform/Dockerfile;https://raw.githubusercontent.com/VirtoCommerce/vc-docker/master/linux/platform/wait-for-it.sh'

    - name: Upload Docker image
      if: ${{ inputs.uploadDocker == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.IMAGE_ARTIFACT_NAME }}
        path: |
          /tmp/platform_image.tar