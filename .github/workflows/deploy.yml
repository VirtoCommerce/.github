# v1.0.0
name: VC deployment

on:
  workflow_call:
    inputs:
      argoServer:
        required: true
        default: 'argo.govirto.com'
        type: string
      artifactUrl: 
        required: true
        type: string
      matrix:
        description: 'Stringified JSON object listing target deployment parameters'
        default: '{"include":[{"envName": "dev", "confPath": ".deployment/demoManager/argoDeploy-marketplace.json"}]}'
        required: false
        type: string
    secrets:
      envPAT:
        required: true
      argoLogin:
        required: true
      argoPassword:
        required: true

jobs:
  Deploy:
    strategy:
      matrix:  ${{ fromJSON(inputs.matrix) }}

    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.envPAT }}
      ARGO_SERVER: ${{ inputs.argoServer }}

    steps: 
      - name: Read deployment config
        uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
        id: deployConfig
        with:
          envName: ${{ matrix.envName }}
          deployConfigPath: ${{ matrix.deployConfigPath }}

      - name: Start deployment
        uses: bobheadxi/deployments@master
        id: deployment
        with:
          step: start
          token: ${{ env.GITHUB_TOKEN }}
          env: Development
          no_override: false

      - name: Update deployment-cm
        uses: VirtoCommerce/vc-github-actions/create-deploy-pr@master
        with:
          deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
          deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
          artifactKey: ${{ steps.deployConfig.outputs.artifactKey }}
          artifactUrl: ${{ inputs.artifactUrl }}
          taskNumber: "undefined"
          forceCommit: "true"
          cmPath: ${{ steps.deployConfig.outputs.cmPath }}

      - name: Wait for environment is up
        if: ${{ matrix.envName }} == 'dev'
        uses: VirtoCommerce/vc-github-actions/vc-argocd-cli@master
        id: argocd-cli
        with:
          server: ${{env.ARGO_SERVER}}
          username: ${{ secrets.argoLogin }}
          password: ${{ secrets.argoPassword }}
          command: app wait ${{ steps.deployConfig.outputs.deployAppName }}

      - name: BUILD_STATE::successful
        if: success()
        run: echo "BUILD_STATE=successful" >> $GITHUB_ENV

      - name: BUILD_STATE::failed
        if: failure()
        run: echo "BUILD_STATE=failed"  >> $GITHUB_ENV

      - name: Update GitHub deployment status
        uses: bobheadxi/deployments@master
        if: always()
        with:
          step: finish
          token: ${{ env.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}


