# v3.200.17
name: VC cloud deployment

on:
  workflow_call:
    inputs:
      argoServer:
        required: false
        default: 'argo.virtocommerce.cloud'
        type: string
      releaseSource:
        description: 'Deployment source. Allowed values: platform, module'
        required: true
        type: string
      platformVer:
        description: 'Deploying Platform version'
        required: false
        type: string
      platformTag:
        description: 'Deploying Platform tag'
        required: false
        type: string
      moduleId: 
        description: 'Deploying Module id'
        required: false
        type: string
      moduleVer: 
        description: 'Deploying Module version'
        required: false
        type: string
      moduleBlob: 
        description: 'Deploying Module blob name'
        required: false
        type: string
      matrix:
        description: 'Stringified JSON object listing target deployment parameters'
        default: '{"include":[{"envName": "dev", "confPath": ".deployment/module/cloudDeploy.json", "forceCommit": "true", "releaseType": "AzureBlob"]}'
        required: false
        type: string
      taskNumber:
        description: 'Jira key for link commit'
        default: 'undefined'
        required: false
        type: string
      jiraKeys:
        description: 'Jira keys for deployment link'
        default: ''
        required: false
        type: string

jobs:
  Deploy:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:  ${{ fromJSON(inputs.matrix) }}

    runs-on: ubuntu-20.04
    env:
      CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
      CLIENT_ID: ${{secrets.CLIENT_ID}}
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      ARGO_SERVER: ${{ inputs.argoServer }}
      SLEEP_TIME: '3m'

    steps: 

      - name: Set forceCommit value #Create deployment commit instead of Pull request to a deployment repo
        id: forceCommit
        shell: pwsh
        run: | 
           $forceCommits = @("true", "false")
           if ($forceCommits -contains "${{ matrix.forceCommit }}".ToLower()) {
             echo "::set-output name=value::${{ matrix.forceCommit }}"
           } else {
             echo "::set-output name-value::true"
           }

      - name: Read deployment config
        uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
        id: deployConfig
        with:
          envName: ${{ matrix.envName }}
          deployConfigPath: ${{ matrix.confPath }}

      - name: Start deployment
        uses: bobheadxi/deployments@master
        id: deployment
        with:
          step: start
          token: ${{ env.GITHUB_TOKEN }}
          env: Development
          no_override: false

      - name: Update deployment-cm
        uses: VirtoCommerce/vc-github-actions/cloud-create-deployment@master
        with:
          deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
          deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
          releaseSource: ${{ inputs.releaseSource }}
          releaseType: ${{ matrix.releaseType }}
          platformVer: ${{ inputs.platformVer }}
          platformTag: ${{ inputs.platformTag }}
          moduleId: ${{ inputs.moduleId }}
          moduleVer: ${{ inputs.moduleVer }}
          moduleBlob: ${{ inputs.moduleBlob }}
          taskNumber: ${{ inputs.taskNumber }}
          forceCommit: ${{ steps.forceCommit.outputs.value }}
          configPath: ${{ steps.deployConfig.outputs.cmPath }}

      - name: Sleep for ${{ env.SLEEP_TIME }}
        if: ${{ steps.forceCommit.outputs.value == 'true' }}
        run: sleep ${{ env.SLEEP_TIME }}
        shell: bash

      - name: Wait for environment is up
        if: ${{ steps.forceCommit.outputs.value == 'true' }}
        timeout-minutes: 5
        uses: VirtoCommerce/vc-github-actions/vc-argocd-cli@master
        with:
          server: ${{env.ARGO_SERVER}}
          username: ${{ secrets.VIRTOCLOUD_LOGIN }}
          password: ${{ secrets.VIRTOCLOUD_PASSWORD }}
          command: app wait ${{ steps.deployConfig.outputs.deployAppName }}

      - name: DEPLOY_STATE::successful
        if: success()
        run: echo "DEPLOY_STATE=successful" >> $GITHUB_ENV

      - name: DEPLOY_STATE::failed
        if: failure()
        run: echo "DEPLOY_STATE=failed"  >> $GITHUB_ENV

      - name: Update GitHub deployment status
        uses: bobheadxi/deployments@master
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Push Deployment Info to Jira
        if: ${{ env.CLOUD_INSTANCE_BASE_URL != 0 && env.CLIENT_ID != 0 && env.CLIENT_SECRET != 0 && inputs.jiraKeys != '' && always() }}
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        env:
          CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
        with:
          cloud-instance-base-url: ${{ secrets.CLOUD_INSTANCE_BASE_URL }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          deployment-sequence-number: ${{ github.run_id }}
          update-sequence-number: ${{ github.run_id }}
          issue-keys: ${{ inputs.jiraKeys }}
          display-name: ${{ steps.deployConfig.outputs.deployAppName }}
          url: ${{ steps.deployConfig.outputs.environmentUrl }}
          description: 'Deployment to the ${{ steps.deployConfig.outputs.environmentName }} environment'
          last-updated: '${{github.event.head_commit.timestamp}}'
          state: '${{ env.DEPLOY_STATE }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          pipeline-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          pipeline-url: '${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}'
          environment-id: ${{ steps.deployConfig.outputs.environmentId }}
          environment-display-name: ${{ steps.deployConfig.outputs.environmentName }}
          environment-type: ${{ steps.deployConfig.outputs.environmentType }}
